EXTENSIONS = [
    "flask_appfactory.ext.jinja2",
    "flask_celeryext:FlaskCeleryExt",
    "exts.sqlalchemy",
    "exts.uploads",
    "exts.smtp",
]
PACKAGES = [
    "libs",
    "mods.api",
    "mods.ui",
    "mods.admin",
]
# Flask Conf
FLASK_SERVER_NAME = 'malwarescan.example.com'
FLASK_HOST = '0.0.0.0'
FLASK_PORT = 8080
FLASK_DEBUG = False
JSONIFY_PRETTYPRINT_REGULAR = True
EXPLAIN_TEMPLATE_LOADING = True
SECRET_KEY = 'c147aca13ed027e9e62c35f'
FLASK_ADMIN_FLUID_LAYOUT = True
# Flask-Uploads Conf
UPLOADS_DEFAULT_DEST = "/tmp/uploads/"
# DB Conf
DB_CONF = {
            'adapter': 'postgresql',
            'user': 'malwarescan',
            'pw': '123456',
            'db': 'malwarescan_db',
            'host': '127.0.0.1',
            'port': '5432',
          }
# SQLAlchemy Conf
SQLALCHEMY_TRACK_MODIFICATIONS = False
SQLALCHEMY_ECHO = False
# For higher load environments. Set these as you see fit.
#SQLALCHEMY_POOL_SIZE = 50
#SQLALCHEMY_POOL_RECYCLE = 1800
#SQLALCHEMY_MAX_OVERFLOW = 25
# SQLite3
#SQLALCHEMY_DATABASE_URI = 'sqlite:///malwarescan.db'
# PostgreSQL
SQLALCHEMY_DATABASE_URI = '{adapter}+psycopg2://{user}:{pw}@{host}:{port}/{db}'.format(**DB_CONF)
# Celery Conf
#CELERY_ACCEPT_CONTENT = ['json', 'msgpack', 'yaml', 'pickle']
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'Europe/Sofia'
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_WORKER_CONCURRENCY = 2
CELERY_WORKER_LOG_FORMAT = "%(asctime)s | %(levelname)-6s | %(process)-6d | %(funcName)-6s | %(message)s"
# Redis
#CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
# RabbitMQ
CELERY_BROKER_URL = 'amqp://guest:guest@localhost:5672//'
# PostgreSQL
CELERY_RESULT_BACKEND = 'db+{adapter}://{user}:{pw}@{host}:{port}/{db}'.format(**DB_CONF)
# Celery Routing
#CELERY_TASK_ROUTES = {'mods.api.tasks.client_eval': {'queue': 'submissions'},
#                      'mods.api.tasks.eval_file': {'queue': 'submissions'},
#                      'mods.api.tasks.eval_result': {'queue': 'results'}}
# CASMA API Conf
CAS_API = {
        #"host": "127.0.0.1:8082",
        "host": "10.11.1.4:8082",
        "token": "63da075f599a4297bb1d96f9ee65e10e",
        #"wait_ms": "600000",    # 10 minutes
        "wait_ms": "0",         # Async submit, result collected via 'wsreporter'
        }
# Flask-Mail Conf
MAIL_SERVER = 'smtp.google.com'
MAIL_PORT = 587
MAIL_USE_SSL = False
MAIL_USE_TLS = False
MAIL_USERNAME = ''
MAIL_PASSWORD = ''
MAIL_DEFAULT_SENDER = '"MalwareScan Framework" <malware@akat-t.com>'
ADMINS = [
    '"Lyben Bahtarliev" <lyuben.bahtarliev@akat-t.com>',
    ]
# Logging
APP_LOG = {'formatters': {'unified': {'datefmt': '%Y-%m-%d %H:%M:%S',
                          'format': '%(asctime)s | %(levelname)-6s | '
                                    '%(process)-6d | %(funcName)-6s | '
                                    '%(message)s'}},
 'handlers': {'console': {'class': 'logging.StreamHandler',
                          'formatter': 'unified',
                          'level': 'INFO',
                          'stream': 'ext://sys.stdout'}},
 'loggers': {'root': {'handlers': ['console'], 'level': 'INFO', 'propagate': True}},
 'version': 1}
